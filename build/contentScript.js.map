{"version":3,"file":"contentScript.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;AAGA;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,sCAAsC;;;AAGtC;AACA;AACA;;;AAGA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;;AAIA;AACO;AACP;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;;;AAIA;AACO;AACP;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL,GAAG;AACH;;;AAGA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA,yCAAyC,MAAM;AAC/C;AACA;AACA;;;;;;;UC5MA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNuL;;;AAGvL;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA,IAAI,sDAAc;;;AAGlB;AACA,sBAAsB,uDAAe;AACrC,cAAc,oDAAY;;;AAG1B;;;AAGA;AACA;AACA,4BAA4B,yDAAiB;AAC7C;AACA,sBAAsB,2BAA2B;AACjD;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,oBAAoB,qDAAa;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,wCAAwC,sBAAsB;AAC9D,+CAA+C,iCAAiC;AAChF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;;AAGA;AACA,+BAA+B,gDAAQ;AACvC,qCAAqC,aAAa;AAClD;AACA;;AAEA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA,CAAC,E","sources":["webpack://youtube-downloader-extension/./src/utils.js","webpack://youtube-downloader-extension/webpack/bootstrap","webpack://youtube-downloader-extension/webpack/runtime/define property getters","webpack://youtube-downloader-extension/webpack/runtime/hasOwnProperty shorthand","webpack://youtube-downloader-extension/webpack/runtime/make namespace object","webpack://youtube-downloader-extension/./src/contentScript.js"],"sourcesContent":["// Search DOM and wait until element is loaded\nexport async function isElementLoaded(selector) {\n    while(!document.querySelector(selector)) {\n      await new Promise(r => setTimeout(r, 500));\n    }\n    return document.querySelector(selector);\n}; \n  \n\n\n// Search DOM and wait until elements are loaded\nexport async function areElementsLoaded(selector) {\n    while(!document.querySelectorAll(selector)) {\n      await new Promise(r => setTimeout(r, 500));\n    }\n    return [ document.querySelectorAll(selector) ];\n}; \n  \n\n\n// Create button\nexport function createButton(text,color,btnclass) {\n    var btn = document.createElement('button')\n    btn.style.backgroundColor = color;\n    btn.innerText = text\n    btn.style.margin = '20px';\n    btn.style.color = 'white'; \n    btn.style.borderRadius = '20px';\n    btn.style.padding = '12.5px'; \n    btn.style.fontSize = '14px';\n    btn.style.fontWeight = 'bold';\n    btn.setAttribute('class',btnclass); \n    btn.style.border = '0'; \n    btn.style.display = 'flex';\n    btn.style.alignItems = 'center';\n    return btn; \n}\n  \n\n\n// Create spinner\nexport function createSpinner() { \n      // Create a loader element\n      const loaderElement = document.createElement('div');\n      // Create a loader container\n      const loaderContainer = document.createElement('div'); \n      // Assign loader container a class\n      loaderContainer.classList.add('loader');\n      // Apply the specified styles to loader element\n      loaderElement.style.border = '3px solid #f3f3f3';\n      loaderElement.style.borderRadius = '50%';\n      loaderElement.style.borderBottom = '2px solid black';\n      loaderElement.style.width = '20px';\n      loaderElement.style.height = '20px';\n      loaderElement.style.webkitAnimation = 'spin 2s linear infinite';\n      loaderElement.style.animation = 'spin 2s linear infinite';\n      // Apply the specified styles to loader container\n      loaderContainer.style.padding = '10px 10px 10px 10px';\n      loaderContainer.style.alignItems = 'center';\n      loaderContainer.style.display = 'flex';\n      // Create the @keyframes rules\n      const keyframesStyle = document.createElement('style');\n      // Keyframe properties\n      keyframesStyle.textContent = `\n        @-webkit-keyframes spin {\n          0% { -webkit-transform: rotate(0deg); }\n          100% { -webkit-transform: rotate(360deg); }\n        }\n    \n        @keyframes spin {\n          0% { transform: rotate(0deg); }\n          100% { transform: rotate(360deg); }\n        }\n      `;\n      // append loader to the loader container\n      loaderContainer.appendChild(loaderElement); \n      document.head.appendChild(keyframesStyle);\n      return loaderContainer; \n}\n  \n\n\n// Method to create a request\nexport async function postRequest(serverUrl,method,data='',contentType) {\n    // Request options\n    const options = {\n      method: method,\n      body:  JSON.stringify(data),\n      headers: {\n        \"Content-Type\": contentType\n      }\n    }\n    // Request response\n    const response = await fetch(serverUrl,options)\n    .then(response => {\n      if(!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .then(serverData => {\n      console.log(serverData); \n      return serverData;\n    })\n    .catch(error => console.error('Error', error)); \n    return response; \n}\n\n\n// function to download video\nexport async function downloadVideo(url,filename) {\n  try {\n    // Fetch the video as a Blob\n    const response = await fetch(url);\n    const videoBlob = await response.blob();\n\n    const contentLength = response.headers.get('Content-Length');\n    console.log('Video size:', contentLength, 'bytes');\n\n\n    // Create a download link\n    const downloadLink = document.createElement('a');\n    downloadLink.href = URL.createObjectURL(videoBlob);\n    downloadLink.download = filename; // You can set the desired filename here\n\n\n    // Append the link to the document and trigger the download\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n\n\n    // Clean up\n    document.body.removeChild(downloadLink);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n}\n\n\n\n// Store the youtube link\nexport function setYoutubeLink(url) {\n  var key = 'youtubeLink';\n\n  var data = {};\n  data[key] = url;\n\n  chrome.storage.local.set(data, function() {\n    console.log('youtubeLink stored:', url);\n  });\n}\n\n\n\n// Retrieve the youtubeLink variable from chrome.storage.local\nexport function getStorageItem(key) {\n  return new Promise((resolve, reject) => {\n    chrome.storage.local.get(key, (result) => {\n      if (chrome.runtime.lastError) {\n        reject(chrome.runtime.lastError);\n      } else {\n        resolve(result[key]);\n      }\n    });\n  });\n}\n\n\n// Function to send link and retrieve the Cloudfront Url\nexport async function sendLink() { \n    \n    const youtubeLink = await getStorageItem('youtubeLink'); \n    // YouTube URL as data\n    const postData = {\n        link: youtubeLink\n    };\n    console.log(postData); \n\n    // Send the Data to the server\n    try {\n      // POST request options\n      //const url = 'http://127.0.0.1:3000/getLink'; \n      const url = 'https://pfmjmsnfzq.us-west-2.awsapprunner.com/getLink'\n      const options = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          // Add any other headers as needed\n        },\n        body: JSON.stringify(postData), // Convert data to JSON format\n      };\n      const resp = await fetch(url, options);\n      if (!resp.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const responseData = await resp.json(); // Parse the JSON response\n      return responseData['cloudfront']; \n    } \n  catch (error) {\n    //console.error('Error:', error.message);\n    // Run function again if we get a CORS error\n    console.log(`Something went wrong: ${error}`)\n    //await sendLink(btn); \n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { sendLink, isElementLoaded, createButton, areElementsLoaded, createSpinner, downloadVideoWithProgress, downloadVideoWithAxios, setYoutubeLink, getStorageItem } from \"./utils\";\n\n\nchrome.runtime.onMessage.addListener(async function (request, sender, sendResponse) {\n  // Check if URL has changed\n  if(request.type == \"URL_CHANGE\" && request.url.includes(\"youtube.com/watch\")) {\n\n\n    // alert that user is on a YouTube page\n    console.log(\"on a youtube video page\");\n\n\n    // grab the youtube video link \n    const youtubeLink = request.url; \n    setYoutubeLink(youtubeLink); \n\n\n    // Delete download button if it already exists\n    let owner = await isElementLoaded('#owner'); \n    var btn = createButton('Download', '#d9534f','videoBtn');\n\n\n    console.log(\"event source test\");     \n\n\n    // Add the download button to the youtube page\n    owner.appendChild(btn); \n      let container = await areElementsLoaded('.videoBtn');\n      if(container[0].length > 0) {\n        for (var i=0; i < container[0].length-1; i++) {\n          container[0][i].remove(); \n          console.log(i, ' button removed'); \n        }\n      }\n\n\n    // Click listener for when user clicks on button\n    btn.addEventListener('click',async ()=>{\n      btn.innerText = \"Processing...\";\n      var spinner = createSpinner(); \n      btn.appendChild(spinner); \n      // Code for including the download percentage values text in the buttons\n      /*\n      const options = {\n        method: 'GET',\n      }\n      btn.appendChild(spinner); \n      const progressInterval = setInterval(async () => {\n        const response = await fetch('https://pfmjmsnfzq.us-west-2.awsapprunner.com/getProgress'); \n        //const response = await fetch('http://127.0.0.1:3000/getProgress');\n        const progressData = await response.json();\n\n\n        // Handle progress data (you can log it or do something else)\n        console.log(`Progress update: ${progressData.progress}%`);\n        btn.innerText =  `Download Progress: ${progressData.progress.toFixed(2)}%`;\n        \n\n        // Check if progress is 100% and stop fetching\n        if (progressData.progress.toFixed(2) == 100) {\n          clearInterval(progressInterval);\n          console.log(\"Download complete. Stopping progress updates.\");\n          btn.innerText = \"Processing Video...\";\n        }\n      }, 10);\n      */ \n\n\n      // Send the link\n      var linkResponse = await sendLink(); \n      //console.log(`The response: ${linkResponse}`); \n      window.location.href = linkResponse; \n      btn.innerText = \"Download\"; \n\n      // Ping endpoint to delete youtube video from s3 bucket\n      await fetch('https://pfmjmsnfzq.us-west-2.awsapprunner.com/finished'); \n    });\n  } else {\n    console.log(\"Not on youtube video page\"); \n  }\n});"],"names":[],"sourceRoot":""}